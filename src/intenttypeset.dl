
grammar intent = [

  syntax program = statement*;

  syntax compound_statement = '{' statement* '}';

  syntax statement = 
              ( let_statement  
	      | expression_statement
              | function_declaration
              | compound_statement
              | while_loop
              | for_loop
              | if_statement
              | return_statement
              | semicolon_statement
              | match
              | extension 
              ) ;

  syntax expression_statement = expression ';';

  syntax semicolon_statement = ';';  


  syntax expression = 
                ( literal
                | bin_expr 
                | unary_expression
                | function_call
                | table 
                | function_expression
                | meta_expression) ;

  syntax meta_expression = '$' number '.value'?;

  syntax if_statement =   'if' '(' expression ')' statement property!(right, 6000)
                       | 'if' '(' expression ')' statement 'else' statement property!(right,6100);

  syntax while_loop = 'while' '(' expression ')' statement;

  syntax for_loop = 'for' '(' expression ','  expression ',' expression ')' statement;

  syntax bin_expr =
       expression bin_op expression
     | '(' expression ')';


  syntax bin_op = '.' property!(binary_op_left, 30)
              | '..' property!(binary_op_left, 25)
              | '+' property!(binary_op_left, 25)
  	          | '-' property!(binary_op_left, 25)
  	          | '*' property!(binary_op_left, 30)
  	          | '/' property!(binary_op_left, 30)
  	          | '<' property!(binary_op_left, 20)
  	          | '>' property!(binary_op_left, 20)
  	          | '<='property!(binary_op_left, 20)
  	          | '>='property!(binary_op_left, 20)
  	          | '=='property!(binary_op_left, 20)
  	          | '!='property!(binary_op_left, 20)
  	          | '&&'property!(binary_op_left, 10)
  	          | '||'property!(binary_op_left, 10)
  	          | '=' property!(binary_op_left, 10);


  syntax unary_expression = '!' expression | identifier table_element;
     
  syntax let_statement = 'let' identifier (':' identifier)? '=' expression_statement;

  syntax syntax_ex               = ('string' | 'int' | 'bool' | 'any');

  syntax parameter           = identifier (':' syntax_ex)?;

  syntax argument           = expression;

  syntax function_declaration  = 'function' identifier '(' parameter? (',' parameter)* ')' (':' syntax_ex)? function_body;

  syntax function_expression  = 'function' '(' parameter? (',' parameter)* ')' (':' syntax_ex)? function_body;

  syntax function_body = compound_statement;

  syntax function_call = identifier '(' argument* ')' ;

  syntax return_statement = 'return' expression ;

  syntax bool = ('true' | 'false');

  syntax table_element = '[' literal ']' ;
  syntax literal = (number | string | bool | identifier);

  syntax table = '[' expression*  ']';

  syntax identifier       = "[a-zA-Z_][a-zA-Z_0-9]*" ;

  syntax number             = "[0-9][0-9]*" ;

  syntax string =  "\"([^\"\\]|\\[^])*\"";

  syntax whitespace = ( "[ \t\r\n]+" 
                 | singleLineComment 
                 | multiLineComment 
                 | nestedComment )* ;

  syntax singleLineComment = '//' "[^\n]*" '\n';

  syntax multiLineComment = '/*' ( "[^*]" | '*'+ "[^*\/]" )* '*'+ '/';

  syntax nestedComment = '/+' ( nestedComment 
                        | ( "[^+]" 
                        | '+'+ "[^+\/]" )* '+'+ )* ( "[^+]" 
                        | '+'+ "[^+\/]" )* '+'+ '/';


  syntax match_id = "[a-zA-Z_][a-zA-Z_0-9]*";

  syntax match = 'match' '(' match_id ')' '{' match_case + '}' ;

  syntax code = statement*;

  syntax match_case = '|' number? '=>' '{' code '}';

  syntax extension = main;

]


