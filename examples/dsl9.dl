typeset basic = [
  type main = p;
  type p = s*;
  type s = (map | tuple);
  type tuple = 'tuple' '(' tuple_expr? (',' tuple_expr)* ')';
  type tuple_expr = "[a-z]" ;
  type map =   "[a-z0-9]+" ':' "[0-9]+" ;
]

match(p) 
{
  |  => {
	@print ("p")
        $0
  }
}

match(tuple) 
{
  | 0 => {
    @print ("tuple")
    let @x = 5
    if (@x == 5) @print(@x)
  }
}

match(main)
{
  | => {
	@print ("main before")
        $0
	@print ("main after")
  }
}

match(s)
{
  | => {
    @print("s")
    $0
  }
}

match(map)
{
  | => {
    @print("map")
  }
}

@print("hello world")
tuple (a, b, c, d)
delak : 1
bolek : 2
monia : 3